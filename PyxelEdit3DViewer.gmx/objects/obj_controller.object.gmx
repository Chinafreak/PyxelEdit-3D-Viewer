<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>filepath = get_open_filename("Pyxel Edit Files|*.pyxel|GIF Files|*.gif", "");

//gml_release_mode(true);


global.animIndex = 0;
global.heightPixel = 1;

if filepath == ""{
    game_end();
    return 0;
}


filename = filename_name(filepath);
filedirectory = filename_dir(filepath);
directory_create("data");

global.index = 0;
global.posX = 0;
global.imageFormat = string_extract(filename, ".", 1)
global.imageName  = string_extract(filename, ".", 0)

load_files();

if (filepath != "" &amp;&amp; global.imageFormat){
    show_message("The file must be in *.pyxel or *.gif");
}

alarm[0] = 5;


hex = string_upper(string(window_handle()))
dec = 0
pow = 0

for(i=string_length(hex); i&gt;=1; i-=1) {
    char = string_char_at(hex,i)
    val = string_pos(char,"0123456789ABCDEF") - 1
    dec += val*power(16,pow)
    pow += 1
}

pinit = true;
ontop_set(dec);

alpha = 0;

cursorX = 0;
cursorY = 0;

cursorXDir = 0;
cursorYDir = 0;

windowWidth = 0;
windowHeight = 0;
windowX = 0;
windowY = 0;
resizeMode = false;

enum resize{
    top,
    left,
    bottom,
    right,
    count,
    none
}

resizeType = resize.none;
dir = 0;
dir_pre = 0;

scale = 1;
pixelated = false;
fixEdge = false;
surf = surface_create(view_wview[0], view_hview[0]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check the File every 2 Step if the file is new

if (file_exists(filepath)){
    var file_string_check = md5_file(filepath);

    if (file_string_check != file_binary){
        img_delete();
        load_files()
        alpha = 1;
    }
}



alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_f1)){    
    var filename = get_save_filename("OBJ Files|*.obj", "");
    surface_to_obj(global.animationSurface, filename);
}


global.index = median(0, array_length_1d(global.animationName)-1, global.index);

if (keyboard_check_pressed(ord("W")) || keyboard_check_pressed(vk_up)){
    global.heightPixel += 0.1;    
}else if (keyboard_check_pressed(ord("S")) || keyboard_check_pressed(vk_down)){
    global.heightPixel -= 0.1;
}

if (keyboard_check_pressed(ord("A")) || keyboard_check_pressed(vk_left)){
    global.index = max(0, global.index-1);    
}else if (keyboard_check_pressed(ord("D")) || keyboard_check_pressed(vk_right)){
    global.index = min(array_length_1d(global.animationName)-1, global.index+1);
}

if (pinit){
    ontop_set(dec);
}


global.posX = approach_smooth(global.posX, -(global.index*(view_wview[0])*scale), 0.25);

if (!resizeMode){
    if (mouse_check_button_pressed(mb_left)){
        cursorXDir = window_mouse_get_x();
        dir_pre = dir;
    }

    if (mouse_check_button(mb_left)){
        dir = dir_pre+window_mouse_get_x()-cursorXDir;
    }else{
        dir++;
    }
}else{
    dir++;
}

if (mouse_check_button_pressed(mb_middle)|| mouse_check_button_pressed(mb_right)){
    cursorX = window_mouse_get_x();
    cursorY = window_mouse_get_y();
    window_set_cursor(cr_size_all);
}

if (mouse_check_button_released(mb_middle)|| mouse_check_button_released(mb_right)){
    window_set_cursor(cr_default);
}

if (mouse_check_button(mb_middle) || mouse_check_button(mb_right)){
    window_set_position(window_get_x()+window_mouse_get_x()-cursorX, window_get_y()+window_mouse_get_y()-cursorY);
    window_set_cursor(cr_size_all);
}

if (mouse_wheel_up()){
    scale+=0.1*scale;
    if (scale &gt; 128){
        scale = 128;
    }
    global.posX = -(global.index*(view_wview[0])*scale);
}else if (mouse_wheel_down()){
    var prescale = scale;
    scale-=0.1*scale;
    if (scale &lt;= 0.01){
        scale = prescale;
    }

    global.posX = -(global.index*(view_wview[0])*scale);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>directory_destroy("data");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (is_array(global.animationName)){
    draw_set_halign(fa_center);
    draw_set_font(font0);
    draw_text(window_get_width()/2 + string_width(string(scale))-string_width(string(floor(scale))), 18, global.animationName[global.index]);
    draw_set_halign(fa_left);
}else{
    draw_set_halign(fa_center);
    draw_set_font(font0);
    draw_text(window_get_width()/2, (window_get_height()/2)-20, "There is no animation#on this file");
    draw_set_halign(fa_left);    
}

draw_text(10, 18, string(scale)+"x"+"#"+string(global.heightPixel)+"px");

draw_set_alpha(alpha);
draw_text(5,window_get_height()-22,"Updated");
draw_set_alpha(1);

alpha = approach_smooth(alpha, 0, 0.025);

if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), window_get_width()-8, (window_get_height()/2)-16, window_get_width(), (window_get_height()/2)+16))
{
    if (mouse_check_button_pressed(mb_left)){
        cursorX = window_mouse_get_x();
        cursorY = window_mouse_get_y();
        windowWidth = window_get_width();
        windowHeight = window_get_height();
        resizeMode = true;
        resizeType = resize.right;
    }

    if (mouse_check_button(mb_left)){
        draw_set_color(merge_color(c_black, c_white, 0.4));
        
       
    }else{
        draw_set_color(merge_color(c_black, c_white, 0.8));
    }
    
}else{
    draw_set_color(c_white);
}
draw_sprite_ext(spr_size_h, 0, window_get_width()-8, (window_get_height()/2), 1, 1, 0, draw_get_color(), 1);
if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), 0, (window_get_height()/2)-16, 8, (window_get_height()/2)+16))
{
    if (mouse_check_button_pressed(mb_left)){
        cursorX = window_mouse_get_x();
        cursorY = window_mouse_get_y();
        windowX  = window_get_x();
        windowY = window_get_y();
        windowWidth = window_get_width();
        windowHeight = window_get_height();
        resizeMode = true;
        resizeType = resize.left;
    }

    if (mouse_check_button(mb_left)){
        draw_set_color(merge_color(c_black, c_white, 0.4));
        
       
    }else{
        draw_set_color(merge_color(c_black, c_white, 0.8));
    }
    
}else{
    draw_set_color(c_white);
}
draw_sprite_ext(spr_size_h, 1, 0, (window_get_height()/2), 1, 1, 0, draw_get_color(), 1);

if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), ((window_get_width()-130)/2)-16, 0, ((window_get_width()-130)/2)+16, 8))
{
    if (mouse_check_button_pressed(mb_left)){
        cursorX = window_mouse_get_x();
        cursorY = window_mouse_get_y();
        windowX  = window_get_x();
        windowY = window_get_y();
        windowWidth = window_get_width();
        windowHeight = window_get_height();
        resizeMode = true;
        resizeType = resize.top;
    }

    if (mouse_check_button(mb_left)){
        draw_set_color(merge_color(c_black, c_white, 0.4));
        
       
    }else{
        draw_set_color(merge_color(c_black, c_white, 0.8));
    }
    
}else{
    draw_set_color(c_white);
}

draw_sprite_ext(spr_size_w, 0, ((window_get_width()-130)/2), 0, 1, 1, 0, draw_get_color(), 1);

if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), ((window_get_width())/2)-16, window_get_height()-8, ((window_get_width())/2)+16, window_get_height()))
{
    if (mouse_check_button_pressed(mb_left)){
        cursorX = window_mouse_get_x();
        cursorY = window_mouse_get_y();
        windowX  = window_get_x();
        windowY = window_get_y();
        windowWidth = window_get_width();
        windowHeight = window_get_height();
        resizeMode = true;
        resizeType = resize.bottom;
    }

    if (mouse_check_button(mb_left)){
        draw_set_color(merge_color(c_black, c_white, 0.4));
        
       
    }else{
        draw_set_color(merge_color(c_black, c_white, 0.8));
    }
    
}else{
    draw_set_color(c_white);
}
draw_sprite_ext(spr_size_w, 1, ((window_get_width())/2), window_get_height()-8, 1, 1, 0, draw_get_color(), 1);

if (resizeMode){
    switch(resizeType){
        case resize.right:
            window_set_size(max(windowWidth+(window_mouse_get_x()-cursorX), 170), window_get_height());
            break;
        case resize.left:
            var posX = window_get_x()+(window_mouse_get_x()-cursorX);
            var prePosX = window_get_x();
            window_set_position(posX, window_get_y());
            if (windowWidth-(window_get_x()-windowX) &lt; 170){
                window_set_position(prePosX, window_get_y());
            } 
            window_set_size(max(windowWidth-(window_get_x()-windowX), 170), window_get_height());
           
            
            break;
        case resize.top:
            var posY = window_get_y()+(window_mouse_get_y()-cursorY)
            var prePosY = window_get_y();
            window_set_position(window_get_x(), posY);
            if (windowHeight-(window_get_y()-windowY) &lt; 120){
                window_set_position(window_get_x(), prePosY);
            }
            window_set_size(window_get_width(), windowHeight-(window_get_y()-windowY));
            break;
        case resize.bottom:
            window_set_size(window_get_width(), max(windowHeight+(window_mouse_get_y()-cursorY), 120));
            break;
            
    }
    
    show_debug_message(window_get_height());
    
    
    if (mouse_check_button_released(mb_left)){
        resizeType = resize.none;
        resizeMode = false;
    }
}

if (window_get_width() != view_wview[0] || window_get_height() != view_hview[0]){
    view_hview[0] = window_get_height();
    view_hport[0] = window_get_height();
    view_wview[0] = window_get_width();
    view_wport[0] = window_get_width();
    surface_resize(application_surface, window_get_width(), window_get_height());
}
////////




if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), window_get_width()-20, 0, window_get_width()-4, 16)){
    if (mouse_check_button(mb_left)){
        draw_set_color(merge_color(c_black, c_white, 0.4));
    }else{
        draw_set_color(merge_color(c_black, c_white, 0.8));
    }
    if (mouse_check_button_pressed(mb_left)){
        game_end();
    }
}else{
    draw_set_color(c_white);
}

draw_sprite_ext(spr_close, 0, window_get_width()-20, 0, 1, 1, 0, draw_get_color(), 1);
if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), window_get_width()-40, 0, window_get_width()-40+16, 16)){
    if (mouse_check_button(mb_left)){
        draw_set_color(merge_color(c_black, c_white, 0.4));
    }else{
        draw_set_color(merge_color(c_black, c_white, 0.8));
    }
    if (mouse_check_button_pressed(mb_left)){
        img_delete();
        pyxeledit_load();
        scale = 1;
        global.posX = -(global.index*(view_wview[0])*scale);
    }
}else{
    draw_set_color(c_white);
}

draw_sprite_ext(spr_reload, 0, window_get_width()-40, 0, 1, 1, 0, draw_get_color(), 1);

if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), window_get_width()-60, 0, window_get_width()-60+16, 16)){
    if (mouse_check_button(mb_left)){
        draw_set_color(merge_color(c_black, c_white, 0.4));
    }else{
        draw_set_color(merge_color(c_black, c_white, 0.8));
    }
    if (mouse_check_button_pressed(mb_left)){
        pixelated = !pixelated;
    }
}else{
    draw_set_color(c_white);
}

draw_sprite_ext(spr_pixelated, pixelated, window_get_width()-60, 0, 1, 1, 0, draw_get_color(), 1);

if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), window_get_width()-80, 0, window_get_width()-80+16, 16)){
    if (mouse_check_button(mb_left)){
        draw_set_color(merge_color(c_black, c_white, 0.4));
    }else{
        draw_set_color(merge_color(c_black, c_white, 0.8));
    }
    if (mouse_check_button_pressed(mb_left)){
        fixEdge = !fixEdge;
    }
}else{
    draw_set_color(c_white);
}

draw_sprite_ext(spr_fixEdge, fixEdge, window_get_width()-80, 0, 1, 1, 0, draw_get_color(), 1);


if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), window_get_width()-100, 0, window_get_width()-100+16, 16)){
    if (mouse_check_button(mb_left)){
        draw_set_color(merge_color(c_black, c_white, 0.4));
    }else{
        draw_set_color(merge_color(c_black, c_white, 0.8));
    }
    if (mouse_check_button_pressed(mb_left)){
        if (pinit){
            ontop_unset(dec);
        }else{
            ontop_set(dec);
        }
        pinit = !pinit;
    }
}else{
    draw_set_color(c_white);
}

draw_sprite_ext(spr_pin, pinit, window_get_width()-100, 0, 1, 1, 0, draw_get_color(), 1);

if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), window_get_width()-120, 0, window_get_width()-120+16, 16)){
    if (mouse_check_button(mb_left)){
        draw_set_color(merge_color(c_black, c_white, 0.4));
    }else{
        draw_set_color(merge_color(c_black, c_white, 0.8));
    }
    if (mouse_check_button_pressed(mb_left)){
        var pre = filepath;
        ontop_unset(dec);
        filepath = get_open_filename("Pyxel Edit Files |*.pyxel", "");
        if (filepath != "" &amp;&amp; string_extract(filename_name(filepath), ".", 1) != "pyxel"){
            show_message("The file must be in *.pyxel");
        }
        if (filepath == "" || string_extract(filename_name(filepath), ".", 1) != "pyxel"){
            filepath = pre;
        }else{
            filename = filename_name(filepath);
            filedirectory = filename_dir(filepath);
            img_delete();
            pyxeledit_load();
        }
        if (pinit){
            ontop_set(dec);
        }
    }
}else{
    draw_set_color(c_white);
}

draw_sprite_ext(spr_open, pinit, window_get_width()-120, 0, 1, 1, 0, draw_get_color(), 1);

if (point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), window_get_width()-140, 0, window_get_width()-140+16, 16)){
    if (mouse_check_button(mb_left)){
        draw_set_color(merge_color(c_black, c_white, 0.4));
    }else{
        draw_set_color(merge_color(c_black, c_white, 0.8));
    }
    if (mouse_check_button_pressed(mb_left)){
        ontop_unset(dec);
        var stop = false;
        var exportScale         = get_string("Scale: ", 1);
        
        if (exportScale == "" || real(exportScale) == 0){
            show_message("Only number, please");
            stop = true; 
            return 0; 
        }
        
        exportScale = real(exportScale);
        
        var exportFramesNumb    = get_string("Number of Frames: ", 359);
        
        if (exportFramesNumb == "" || real(exportFramesNumb) == 0){
            show_message("Only number, please");
            stop = true;  
            return 0; 
        }
        
        exportFramesNumb = real(exportFramesNumb);
        
        var exportNumberTileWide = get_string("Number of tile wide: ", 10);
        
        if (exportNumberTileWide == "" || real(exportNumberTileWide) == 0){
            show_message("Only number, please");
            stop = true;  
            return 0; 
        }
        
        exportNumberTileWide = real(exportNumberTileWide);

        
        var savefile = get_save_filename("Images PNG|*.png", "");
        
        if (savefile == ""){
            return 0;
        }
        
        
        var larger = sqrt(power(global.tileWidth, 2)+power(global.tileHeight, 2));
        var surfaceSize = surface_create((larger*exportScale)*exportNumberTileWide, ((larger+array_length_2d(global.animationSurface, global.index)+fixEdge)*exportScale)*(t(exportFramesNumb &gt; exportNumberTileWide, 1, 0)+(exportFramesNumb div exportNumberTileWide)));
        surface_set_target(surfaceSize);
        draw_clear_alpha(c_white, 0);
        surface_reset_target();
        

        var num = 0;
        for(var i = 0; i &lt; 360; i+= 360/exportFramesNumb){
            var _x, _y;
            
            _x = (num mod exportNumberTileWide)*larger*exportScale;
            _y = (num div exportNumberTileWide)*(larger+array_length_2d(global.animationSurface, global.index)+fixEdge)*exportScale;
        
            surface_set_target(surfaceSize);
            draw_3d(_x+((larger/2)*exportScale), _y+(((larger/2)+array_length_2d(global.animationSurface, global.index))*exportScale), i, exportScale) 
            surface_reset_target();
            num++;
        }
        surface_save(surfaceSize, savefile);
        show_message("Dimension of single sprite: " + string((larger*exportScale)) + "x" + string((larger+array_length_2d(global.animationSurface, global.index)+fixEdge)*exportScale));
        
        if (pinit){
            ontop_set(dec);
        }
        
    }
}else{
    draw_set_color(c_white);
}

draw_sprite_ext(spr_export, pinit, window_get_width()-140, 0, 1, 1, 0, draw_get_color(), 1);
draw_set_color(c_black);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_surface_rotate_center(global.Surface, room_width/2 ,room_height/2, (current_time/150));

draw_background_tiled_ext(background0, 0, 0, view_wview[0]/window_get_width(), view_hview[0]/window_get_height(), c_white, 1); 
draw_3d((view_wview[0]/2)+ ((global.index * (view_wview[0])*scale)) + global.posX, (view_hview[0]/2)+((global.animationLength[global.index]/2)*scale), dir, scale);

/*
if (!keyboard_check(vk_enter)){
    if (keyboard_check(vk_space)){
        numI = approach(numI, array_length_2d(global.animationSurface, global.index)-1, 0.1);
    }else{
        numI = approach(numI, 0, 0.1);
    }
}




for(var _y = 0; _y &lt; ds_grid_height(g[max(floor(numI), 0)]); _y++){
    for(var _x = 0; _x &lt; ds_grid_width(g[max(floor(numI), 0)]); _x++){
        if (ds_grid_get(g[max(floor(numI), 0)], _x, _y) &gt; 0){
            draw_set_color(c_green);
        }else{
            draw_set_color(c_yellow);
        }
    
        draw_rectangle(4+(_x*4), 150+(_y*4), 4+(_x*4)+4, 150+(_y*4)+4, false);
    }
}
draw_set_color(c_black);

for(var i = 0; i &lt; ds_list_size(vertices[max(floor(numI), 0)]); i++){
    var _x = real(string_extract(ds_list_find_value(vertices[max(floor(numI), 0)], i), "|", 0));
    var _y = real(string_extract(ds_list_find_value(vertices[max(floor(numI), 0)], i), "|", 1));
    //draw_circle(4+_x*4, 150+_y*4, 2, false);   
    draw_point(4+_x*4, 150+_y*4);
    show_debug_message(string(_x) + " " + string(_y));
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
